datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                   String               @id @default(cuid())
    name                 String?
    email                String               @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    projects             Project[]
    organizations        OrganizationMember[]
    ownedOrganizations   Organization[]       @relation("OwnedOrganizations")
    activeOrganizationId String? // FK to Organization
    activeOrganization   Organization?        @relation("ActiveOrganization", fields: [activeOrganizationId], references: [id])
    createdAt            DateTime             @default(now())
    updatedAt            DateTime             @updatedAt

    @@index([activeOrganizationId])
}

model Organization {
    id                 String               @id @default(cuid())
    name               String
    owner              User                 @relation("OwnedOrganizations", fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId            String
    members            OrganizationMember[]
    projects           Project[]
    usersWithActiveOrg User[]               @relation("ActiveOrganization")
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
}

model OrganizationMember {
    id             String       @id @default(cuid())
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
    role           String // e.g., 'owner', 'admin', 'member'
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@unique([userId, organizationId])
}

model Project {
    id             String       @id @default(cuid())
    name           String
    user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String?
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}
